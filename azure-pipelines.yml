# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  - 'main'

pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  testResultsDir: '$(Agent.TempDirectory)/TestResults'
  configuration: 'Release'
  projectPath: 'PlaylistManager.App/PlaylistManager.App.csproj'
  windowsFramework: 'net9.0-windows10.0.19041.0'
  windowsRuntime: 'win-x64'

steps:
  - checkout: self
    fetchDepth: 0

  - task: NuGetToolInstaller@1

  - task: DotNetCoreCLI@2
    displayName: 'Restore dependencies (win-x64)'
    inputs:
      command: 'restore'
      projects: '$(projectPath)'
      arguments: '--runtime $(windowsRuntime)'

  - task: SonarCloudPrepare@3
    displayName: 'Prepare SonarQube Cloud analysis configuration - Main'
    continueOnError: true
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    inputs:
      SonarQube: 'SonarQube Cloud'
      organization: 'ics-2025-xkalinj00'
      scannerMode: 'dotnet'
      projectKey: 'ics-2025-xkalinj00_ics-team-project'
      projectName: 'ics-team-project'
      extraProperties: |
        sonar.scanner.scanAll=false
        sonar.cs.opencover.reportsPaths="$(testResultsDir)/**/*.xml"
        sonar.cs.vstest.reportsPaths="$(testResultsDir)/**/*.trx"
        sonar.exclusions="**/Migrations/**"

  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      projects: '$(projectPath)'
      arguments: >
        --configuration $(configuration)
        --framework $(windowsFramework)
        --runtime $(windowsRuntime)
        /p:UseMaui=true

  - task: DotNetCoreCLI@2
    displayName: 'Run Windows-only Tests with Code Coverage'
    inputs:
      command: 'test'
      projects: '$(projectPath)'
      arguments: >
        --configuration $(buildConfiguration)
        --framework net9.0-windows10.0.19041.0
        --runtime win-x64
        --collect:"XPlat Code Coverage"
        --logger trx
        --results-directory "$(testResultsDir)"

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '$(testResultsDir)/**/*.trx'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@2
    continueOnError: true
    displayName: 'Publish Code Coverage Report'
    inputs:
      summaryFileLocation: '$(testResultsDir)/**/coverage.cobertura.xml'

  - task: SonarCloudAnalyze@3
    continueOnError: true
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: 'Analyze solution with SonarQube Cloud'

  - task: SonarCloudPublish@3
    continueOnError: true
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: 'Publish SonarQube Cloud analysis result'
    inputs:
      pollingTimeoutSec: '300'
