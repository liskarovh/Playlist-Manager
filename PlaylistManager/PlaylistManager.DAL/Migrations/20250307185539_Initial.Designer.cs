// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaylistManager.DAL;

#nullable disable

namespace PlaylistManager.DAL.Migrations
{
    [DbContext(typeof(PlaylistManagerDbContext))]
    [Migration("20250307185539_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("PlaylistManager.DAL.Entities.MultimediaBaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Duration")
                        .HasColumnType("REAL");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MultimediaBaseEntities");

                    b.HasDiscriminator().HasValue("MultimediaBaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.PlaylistMultimediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MultimediaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MultimediaId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistMultimedia");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.AudioMediaEntity", b =>
                {
                    b.HasBaseType("PlaylistManager.DAL.Entities.MultimediaBaseEntity");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AudioMediaEntity");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.VideoMediaEntity", b =>
                {
                    b.HasBaseType("PlaylistManager.DAL.Entities.MultimediaBaseEntity");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resolution")
                        .HasColumnType("TEXT");

                    b.ToTable("MultimediaBaseEntities", t =>
                        {
                            t.Property("Format")
                                .HasColumnName("VideoMediaEntity_Format");

                            t.Property("Genre")
                                .HasColumnName("VideoMediaEntity_Genre");
                        });

                    b.HasDiscriminator().HasValue("VideoMediaEntity");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.AudioBookEntity", b =>
                {
                    b.HasBaseType("PlaylistManager.DAL.Entities.AudioMediaEntity");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AudioBookEntity");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.MusicEntity", b =>
                {
                    b.HasBaseType("PlaylistManager.DAL.Entities.AudioMediaEntity");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.ToTable("MultimediaBaseEntities", t =>
                        {
                            t.Property("Genre")
                                .HasColumnName("MusicEntity_Genre");
                        });

                    b.HasDiscriminator().HasValue("MusicEntity");
                });

            modelBuilder.Entity("PlaylistManager.DAL.Entities.PlaylistMultimediaEntity", b =>
                {
                    b.HasOne("PlaylistManager.DAL.Entities.MultimediaBaseEntity", "Multimedia")
                        .WithMany()
                        .HasForeignKey("MultimediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaylistManager.DAL.Entities.PlaylistEntity", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Multimedia");

                    b.Navigation("Playlist");
                });
#pragma warning restore 612, 618
        }
    }
}
